#include <stdio.h>
#include <stdlib.h>

#define MAX_FRAMES 10  // Maximum number of frames in physical memory

// Function to find the index of the page that will be used farthest in the future
int farthest(int pages[], int n, int frames[], int numFrames, int currentIndex) {
    int farthestIndex = -1;
    int farthestDist = -1;

    for (int i = 0; i < numFrames; i++) {
        int j;
        // Check the next occurrence of the page in the future
        for (j = currentIndex; j < n; j++) {
            if (frames[i] == pages[j]) {
                break;
            }
        }

        // If the page is not found in future references, it's considered the farthest
        if (j == n) {
            return i;
        }

        // Track the page that is farthest in the future
        if (j > farthestDist) {
            farthestDist = j;
            farthestIndex = i;
        }
    }

    return farthestIndex;
}

// Function to implement the Optimal paging technique
void optimalPaging(int pages[], int n, int numFrames) {
    int frames[numFrames];    // Array to hold the frames in memory
    int pageFaults = 0;        // Counter for page faults

    // Initialize frames with -1 (representing empty slots)
    for (int i = 0; i < numFrames; i++) {
        frames[i] = -1;
    }

    printf("Page Reference String: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", pages[i]);
    }
    printf("\n");

    printf("Page Frames (Optimal Order):\n");

    for (int i = 0; i < n; i++) {
        int page = pages[i];
        int pageExists = 0;

        // Check if the page is already in one of the frames
        for (int j = 0; j < numFrames; j++) {
            if (frames[j] == page) {
                pageExists = 1;
                break;
            }
        }

        // If the page is not found, it's a page fault
        if (!pageExists) {
            pageFaults++;

            // If there is space in frames, add the new page
            int emptySlot = -1;
            for (int j = 0; j < numFrames; j++) {
                if (frames[j] == -1) {
                    emptySlot = j;
                    break;
                }
            }

            if (emptySlot != -1) {
                frames[emptySlot] = page;  // Add the page in the empty slot
            }
            // If all frames are full, replace the page that is used farthest in the future
            else {
                int replaceIndex = farthest(pages, n, frames, numFrames, i + 1);
                frames[replaceIndex] = page;  // Replace the page at the replaceIndex
            }
        }

        // Print the current state of frames
        for (int j = 0; j < numFrames; j++) {
            if (frames[j] == -1) {
                printf(" - ");
            } else {
                printf("%d ", frames[j]);
            }
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", pageFaults);
    printf("Page Fault Rate: %.2f%%\n", (float)pageFaults / n * 100);
}

int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3};  // Example page reference string
    int n = sizeof(pages) / sizeof(pages[0]);  // Number of pages in the reference string
    int numFrames;

    // Get the number of frames from the user
    printf("Enter the number of frames: ");
    scanf("%d", &numFrames);

    // Ensure that the number of frames is within a reasonable range
    if (numFrames <= 0 || numFrames > MAX_FRAMES) {
        printf("Invalid number of frames. Please enter a value between 1 and %d.\n", MAX_FRAMES);
        return 1;
    }

    // Call Optimal paging function
    optimalPaging(pages, n, numFrames);

    return 0;
}
