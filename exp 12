#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

// Forks represented by mutexes
pthread_mutex_t forks[NUM_PHILOSOPHERS];

// Condition variable to prevent deadlock
pthread_cond_t condition[NUM_PHILOSOPHERS];

// Each philosopher's ID
int philosophers[NUM_PHILOSOPHERS];

// Function for philosopher to think
void think(int philosopher_id) {
    printf("Philosopher %d is thinking...\n", philosopher_id);
    sleep(rand() % 3 + 1);  // Thinking for a random time between 1 and 3 seconds
}

// Function for philosopher to eat
void eat(int philosopher_id) {
    printf("Philosopher %d is eating...\n", philosopher_id);
    sleep(rand() % 3 + 1);  // Eating for a random time between 1 and 3 seconds
}

// Function for philosopher to pick up forks
void pick_up_forks(int philosopher_id) {
    int left = philosopher_id;
    int right = (philosopher_id + 1) % NUM_PHILOSOPHERS;

    // Lock the left fork and right fork mutexes
    pthread_mutex_lock(&forks[left]);
    pthread_mutex_lock(&forks[right]);

    printf("Philosopher %d picked up forks %d and %d\n", philosopher_id, left, right);
}

// Function for philosopher to put down forks
void put_down_forks(int philosopher_id) {
    int left = philosopher_id;
    int right = (philosopher_id + 1) % NUM_PHILOSOPHERS;

    // Release the locks for left and right forks
    pthread_mutex_unlock(&forks[left]);
    pthread_mutex_unlock(&forks[right]);

    printf("Philosopher %d put down forks %d and %d\n", philosopher_id, left, right);
}

// Function for philosopher's behavior (thinking, picking up forks, eating, putting down forks)
void* philosopher_behavior(void* arg) {
    int philosopher_id = *(int*)arg;

    while (1) {
        think(philosopher_id);                // Think for a while
        pick_up_forks(philosopher_id);        // Pick up forks to eat
        eat(philosopher_id);                  // Eat for a while
        put_down_forks(philosopher_id);       // Put down forks after eating
    }

    return NULL;
}

int main() {
    pthread_t threads[NUM_PHILOSOPHERS];
    
    // Initialize mutexes and condition variables
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
        pthread_cond_init(&condition[i], NULL);
        philosophers[i] = i;
    }

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_create(&threads[i], NULL, philosopher_behavior, (void*)&philosophers[i]);
    }

    // Wait for all threads to finish (they never will because philosophers are always thinking/eating)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(threads[i], NULL);
    }

    // Destroy mutexes and condition variables
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
        pthread_cond_destroy(&condition[i]);
    }

    return 0;
}
