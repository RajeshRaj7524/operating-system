#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5

// Buffer to hold items
int buffer[BUFFER_SIZE];
int in = 0; // Index for the producer
int out = 0; // Index for the consumer

// Semaphores
sem_t empty;  // Semaphore to track empty slots
sem_t full;   // Semaphore to track full slots
sem_t mutex;  // Semaphore for mutual exclusion

// Function for the producer thread
void* producer(void* arg) {
    int item;
    while (1) {
        // Produce an item (for simplicity, just a random number)
        item = rand() % 100;
        
        // Wait for an empty slot in the buffer
        sem_wait(&empty);
        
        // Wait for mutual exclusion to access the buffer
        sem_wait(&mutex);
        
        // Add the item to the buffer
        buffer[in] = item;
        printf("Produced: %d at index %d\n", item, in);
        
        // Update the index for the next item
        in = (in + 1) % BUFFER_SIZE;
        
        // Signal that there is a full slot
        sem_post(&mutex);
        sem_post(&full);
        
        // Simulate production time
        sleep(1);
    }
    
    return NULL;
}

// Function for the consumer thread
void* consumer(void* arg) {
    int item;
    while (1) {
        // Wait for a full slot in the buffer
        sem_wait(&full);
        
        // Wait for mutual exclusion to access the buffer
        sem_wait(&mutex);
        
        // Remove the item from the buffer
        item = buffer[out];
        printf("Consumed: %d from index %d\n", item, out);
        
        // Update the index for the next item
        out = (out + 1) % BUFFER_SIZE;
        
        // Signal that there is an empty slot
        sem_post(&mutex);
        sem_post(&empty);
        
        // Simulate consumption time
        sleep(1);
    }
    
    return NULL;
}

int main() {
    // Initialize the semaphores
    sem_init(&empty, 0, BUFFER_SIZE);  // Initially all slots are empty
    sem_init(&full, 0, 0);             // Initially no items are full
    sem_init(&mutex, 0, 1);            // Mutex for mutual exclusion (binary semaphore)

    // Create producer and consumer threads
    pthread_t prod, cons;
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    // Wait for the threads to finish (which they never will, because of infinite loop)
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    // Destroy the semaphores (this will not be reached in this case)
    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}
