#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>
#include <dirent.h>
#include <string.h>
#include <errno.h>

#define FILE_NAME "sample.txt"
#define DIRECTORY_NAME "sample_dir"

void demonstrateUNIX_IO_calls() {
    int fd;
    struct stat fileStat;
    off_t offset;
    DIR *dir;
    struct dirent *entry;

    // 1. Open a file (using open system call)
    fd = open(FILE_NAME, O_CREAT | O_RDWR, 0644);
    if (fd == -1) {
        perror("Error opening file");
        return;
    }
    printf("File '%s' opened successfully with file descriptor %d\n", FILE_NAME, fd);

    // 2. Change file descriptor flags (using fcntl system call)
    int flags = fcntl(fd, F_GETFL);
    if (flags == -1) {
        perror("Error getting file flags");
        close(fd);
        return;
    }
    printf("Current file flags: %d\n", flags);

    // Setting the file descriptor to non-blocking mode (example)
    flags = fcntl(fd, F_SETFL, flags | O_NONBLOCK);
    if (flags == -1) {
        perror("Error setting file flags");
        close(fd);
        return;
    }
    printf("File descriptor set to non-blocking mode.\n");

    // 3. Move file offset (using lseek system call)
    offset = lseek(fd, 10, SEEK_SET);
    if (offset == -1) {
        perror("Error seeking in file");
        close(fd);
        return;
    }
    printf("Moved file offset to: %ld\n", offset);

    // 4. Get file information (using stat system call)
    if (stat(FILE_NAME, &fileStat) == -1) {
        perror("Error getting file status");
        close(fd);
        return;
    }
    printf("File Information:\n");
    printf("Size: %ld bytes\n", fileStat.st_size);
    printf("Permissions: %o\n", fileStat.st_mode & 0777);

    // 5. Close the file (using close system call)
    if (close(fd) == -1) {
        perror("Error closing the file");
        return;
    }
    printf("File '%s' closed successfully.\n", FILE_NAME);

    // 6. Open a directory (using opendir system call)
    dir = opendir(DIRECTORY_NAME);
    if (dir == NULL) {
        perror("Error opening directory");
        return;
    }
    printf("Directory '%s' opened successfully.\n", DIRECTORY_NAME);

    // 7. Read directory entries (using readdir system call)
    printf("Directory contents:\n");
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }

    // 8. Close the directory (using closedir system call)
    closedir(dir);
    printf("Directory '%s' closed successfully.\n", DIRECTORY_NAME);
}

int main() {
    // Demonstrate UNIX I/O system calls
    demonstrateUNIX_IO_calls();
    return 0;
}
