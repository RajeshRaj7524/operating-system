#include <stdio.h>

#define MAX_PROCESSES 10
#define MAX_BLOCKS 10

// Function to perform First Fit allocation
void firstFit(int blocks[], int m, int processes[], int n) {
    // Array to keep track of block allocation
    int allocation[n];
    
    // Initially, no block is assigned to any process
    for (int i = 0; i < n; i++) {
        allocation[i] = -1;
    }

    // Traverse through each process
    for (int i = 0; i < n; i++) {
        // Find the first block that can accommodate the process
        for (int j = 0; j < m; j++) {
            if (blocks[j] >= processes[i]) {
                allocation[i] = j; // Allocate block j to process i
                blocks[j] -= processes[i];  // Reduce the available block size
                break; // Stop searching after finding the first fit
            }
        }
    }

    // Print the result of allocation
    printf("\nProcess No.\tProcess Size\tBlock No.\tBlock Size\n");
    for (int i = 0; i < n; i++) {
        if (allocation[i] != -1) {
            printf("P%d\t\t%d\t\tB%d\t\t%d\n", i + 1, processes[i], allocation[i] + 1, blocks[allocation[i]]);
        } else {
            printf("P%d\t\t%d\t\tNot Allocated\n", i + 1, processes[i]);
        }
    }
}

int main() {
    int blocks[MAX_BLOCKS], processes[MAX_PROCESSES];
    int m, n;

    // Input the number of blocks and processes
    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input the block sizes
    printf("Enter the sizes of the memory blocks:\n");
    for (int i = 0; i < m; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blocks[i]);
    }

    // Input the process sizes
    printf("Enter the sizes of the processes:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processes[i]);
    }

    // Call the First Fit function
    firstFit(blocks, m, processes, n);

    return 0;
}
