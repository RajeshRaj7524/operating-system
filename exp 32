#include <stdio.h>
#include <stdlib.h>

#define MAX_FRAMES 10  // Maximum number of frames in physical memory

// Function to implement the LRU paging technique
void lruPaging(int pages[], int n, int numFrames) {
    int frames[numFrames];    // Array to hold the frames in memory
    int pageFaults = 0;        // Counter for page faults
    int pageExists;            // Flag to check if the page is in memory

    // Initialize frames with -1 (representing empty slots)
    for (int i = 0; i < numFrames; i++) {
        frames[i] = -1;
    }

    printf("Page Reference String: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", pages[i]);
    }
    printf("\n");

    printf("Page Frames (LRU Order):\n");

    for (int i = 0; i < n; i++) {
        int page = pages[i];
        pageExists = 0;

        // Check if the page is already in one of the frames
        for (int j = 0; j < numFrames; j++) {
            if (frames[j] == page) {
                pageExists = 1;
                // If page is found, move it to the most recently used position
                for (int k = j; k < numFrames - 1; k++) {
                    frames[k] = frames[k + 1];
                }
                frames[numFrames - 1] = page;
                break;
            }
        }

        // If page is not found, it's a page fault
        if (!pageExists) {
            pageFaults++;

            // If there is space in frames, add the new page
            if (frames[0] == -1) {
                for (int j = 0; j < numFrames; j++) {
                    if (frames[j] == -1) {
                        frames[j] = page;
                        break;
                    }
                }
            }
            // If all frames are occupied, replace the least recently used (LRU) page
            else {
                // Shift all pages one position to the left to make space for the new page
                for (int j = 0; j < numFrames - 1; j++) {
                    frames[j] = frames[j + 1];
                }
                frames[numFrames - 1] = page;
            }
        }

        // Print the current state of frames
        for (int j = 0; j < numFrames; j++) {
            if (frames[j] == -1) {
                printf(" - ");
            } else {
                printf("%d ", frames[j]);
            }
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", pageFaults);
    printf("Page Fault Rate: %.2f%%\n", (float)pageFaults / n * 100);
}

int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3};  // Example page reference string
    int n = sizeof(pages) / sizeof(pages[0]);  // Number of pages in the reference string
    int numFrames;

    // Get the number of frames from the user
    printf("Enter the number of frames: ");
    scanf("%d", &numFrames);

    // Ensure that the number of frames is within a reasonable range
    if (numFrames <= 0 || numFrames > MAX_FRAMES) {
        printf("Invalid number of frames. Please enter a value between 1 and %d.\n", MAX_FRAMES);
        return 1;
    }

    // Call LRU paging function
    lruPaging(pages, n, numFrames);

    return 0;
}
