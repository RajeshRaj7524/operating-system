#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

// Function to be executed by the thread
void* threadFunction(void* arg) {
    int threadNum = *((int*)arg);
    printf("Thread %d is running\n", threadNum);
    sleep(2);  // Simulate some work by sleeping for 2 seconds
    printf("Thread %d is exiting\n", threadNum);
    pthread_exit(NULL);  // Explicitly exit the thread
}

int main() {
    pthread_t thread1, thread2;  // Thread identifiers
    int threadNum1 = 1, threadNum2 = 2;
    
    // (i) Creating threads using pthread_create
    if (pthread_create(&thread1, NULL, threadFunction, &threadNum1) != 0) {
        perror("Failed to create thread 1");
        return 1;
    }
    
    if (pthread_create(&thread2, NULL, threadFunction, &threadNum2) != 0) {
        perror("Failed to create thread 2");
        return 1;
    }
    
    // (ii) Join threads using pthread_join
    // Wait for both threads to finish
    if (pthread_join(thread1, NULL) != 0) {
        perror("Failed to join thread 1");
        return 1;
    }
    
    if (pthread_join(thread2, NULL) != 0) {
        perror("Failed to join thread 2");
        return 1;
    }
    
    // (iii) Thread equality using pthread_equal
    if (pthread_equal(thread1, thread2)) {
        printf("Thread 1 and Thread 2 are the same.\n");
    } else {
        printf("Thread 1 and Thread 2 are different.\n");
    }
    
    // (iv) Thread exit has already been demonstrated in threadFunction using pthread_exit
    
    printf("Main thread is exiting\n");
    
    return 0;
}
